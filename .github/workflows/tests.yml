name: Tests

on:
  pull_request:
  push:
    branches: [main, test]
  merge_group:

jobs:
  pre-commit:
    name: Lint
    uses: tskit-dev/.github/.github/workflows/lint.yml@v2

  test:
    name: Python
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python: [ "3.10", 3.13 ]
        os:  [ macos-latest, ubuntu-24.04, windows-latest ]
    defaults:
      run:
        shell: bash
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - name: Set up Python 3.10
        uses: actions/setup-python@v5.4.0
        with:
          python-version: "${{ matrix.python }}"

      - name: Fix windows symlinks
        # This is horrible, but the "git config core.symlinks true" didn't work.
        if: matrix.os == 'windows-latest'
        run: |
          rm lwt_interface
          cp -r --dereference git-submodules/tskit/python/lwt_interface ./lwt_interface

      - name: Install GSL (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install gsl
        
      - name: Install GSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install gsl:x64-windows
          # Add GSL DLL directory to PATH for runtime
          $vcpkgRoot = $env:VCPKG_INSTALLATION_ROOT
          if (-not $vcpkgRoot) { $vcpkgRoot = "C:\vcpkg" }
          $gslBinPath = Join-Path $vcpkgRoot "installed\x64-windows\bin"
          echo "$gslBinPath" >> $env:GITHUB_PATH
          Write-Output "Added to PATH: $gslBinPath"
        shell: powershell

      - name: Install GSL (Ubuntu)
        if: matrix.os == 'ubuntu-24.04'
        run: sudo apt-get update && sudo apt-get install -y libgsl-dev
      
      - name: Install pip deps
        run: | 
          pip install uv
          uv pip install --system -r pyproject.toml --extra test

      - name: Build module and run tests
        if: matrix.os != 'windows-latest'
        run: |
          python setup.py build_ext --inplace
          pytest -xvs -n0

      - name: Build wheel and run tests
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          uv pip install --system build delvewheel
          python -m build --wheel
          $vcpkgRoot = $env:VCPKG_INSTALLATION_ROOT
          if (-not $vcpkgRoot) { $vcpkgRoot = 'C:\vcpkg' }
          $gslBinPath = Join-Path $vcpkgRoot 'installed\x64-windows\bin'
          # Ensure GSL bin is on PATH for this session
          $env:PATH = "$gslBinPath;$env:PATH"
          # Repair wheel(s) to bundle DLLs
          $whls = Get-ChildItem -Path dist -Filter '*.whl'
          if ($whls) {
            foreach ($w in $whls) {
              delvewheel repair $w.FullName -w dist --add-path $gslBinPath
            }
          } else {
            Write-Error 'No wheel files found in dist/'
            exit 1
          }
          # Remove source package directory to ensure pip installs wheel
          if (Test-Path msprime) { Remove-Item -Recurse -Force msprime }
          # Install repaired wheel(s)
          Get-ChildItem -Path dist -Filter '*.whl' | ForEach-Object { pip install $_.FullName }
          pytest -xvs -n0