version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7-stretch
    working_directory: /home/circleci/msprime
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci *
      - restore_cache:
          # Note: we put a v{x} suffix at the end of the cache key so that
          # we can invalidate the cache when we need to. Note that we need
          # to update the key in the ``save_cache`` block below also when
          # doing that.
          key: msprime-{{ .Branch }}-v1
      - run:
          name: Checkout submodules
          command: |
            git submodule update --init --recursive
            # Write out the status for debugging purposes. Are we checked out at tags?
            git submodule status --recursive
      - run:
          name: Install dependencies and set path
          command: |
            sudo apt-get update
            sudo apt-get install libgsl0-dev libcunit1-dev libconfig-dev ninja-build valgrind clang
            pip install --user -r requirements/development.txt
            pip install --user meson twine
            # way to set path persistently https://circleci.com/docs/2.0/env-vars/#setting-path
            echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
      - save_cache:
          key: msprime-{{ .Branch }}-v1
          paths:
            - "/home/circleci/.local"

      - run:
          name: Lint Python (pre-commit)
          command: |
            pre-commit run --all-files --show-diff-on-failure

      # Note: it's important that we build the docs *before* compiling the low-level
      # module so that we're simulating the build on readthedocs as accurately as
      # possible.
      - run:
          name: Make sure the docs build.
          command: make -C docs

      - run:
          name: Compile Python
          command: |
            make allchecks

      - run:
          name: Run highlevel tests and upload coverage
          # We hard-code number of cores here as we were running low on memory with more
          command: |
            pytest --cov=msprime --cov=docs/examples --cov-report=xml --cov-branch \
                        -n 8 tests
            codecov -X gcov -F python
            rm .coverage

      - run:
          name: Compile C with gcc
          command: |
            CFLAGS=--coverage meson lib/ build-gcc && cd build-gcc && ninja

      - run:
          name: Run the low-level tests.
          command: |
            ninja -C build-gcc test

      - run:
          name: Run gcov manually, as the one used in codecov doesn't work here.
          command: |
            gcov -pb -o ./build/temp.linux*/msprime msprime/_msprimemodule.c
            cd build-gcc
            # TODO should be able to do this with 'find', but it's tricky and opaque.
            gcov -pb ./libmsprime.a.p/fenwick.c.gcno ../lib/fenwick.c
            gcov -pb ./libmsprime.a.p/msprime.c.gcno ../lib/msprime.c
            gcov -pb ./libmsprime.a.p/mutgen.c.gcno ../lib/mutgen.c
            gcov -pb ./libmsprime.a.p/object_heap.c.gcno ../lib/object_heap.c
            gcov -pb ./libmsprime.a.p/recomb_map.c.gcno ../lib/recomb_map.c
            gcov -pb ./libmsprime.a.p/interval_map.c.gcno ../lib/interval_map.c
            gcov -pb ./libmsprime.a.p/util.c.gcno ../lib/util.c
            gcov -pb ./libmsprime.a.p/likelihood.c.gcno ../lib/likelihood.c
            cd ..
            codecov -X gcov -F C

      - run:
          name: Make sure we can build a distribution tarball.
          command: |
            python setup.py sdist
            python setup.py check
            python -m twine check dist/*.tar.gz
      - run:
          name: Install from the distribution tarball
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade setuptools pip
            pip install dist/*.tar.gz
